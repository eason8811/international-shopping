openapi: 3.0.3
info:
  title: User Service API (CookieAuth + CSRF Double-Submit + Unified Envelope)
  version: 1.3.0
  description: >
    - 统一鉴权：Cookie 会话（HttpOnly `access_token`）<br/>
    - 统一返回包裹结构（所有 HTTP 状态码均使用相同结构）<br/>
    - CSRF 防护：双提交（Header: `X-CSRF-Token` 与 Cookie: `csrf_token` 必须相等）<br/>
    - 匿名接口：显式 `security: []`<br/>
servers:
  - url: https://api.example.com/api/v1
    description: Production
  - url: http://localhost:8080/api/v1
    description: Local Dev

# 全局需要会话 Cookie；匿名接口在各 path 下显式 security: []
security:
  - cookieAuth: []

tags:
  - name: Auth
    description: 本地注册/登录/激活/密码找回/令牌刷新/CSRF
  - name: OAuth2
    description: 第三方登录授权与回调
  - name: Users
    description: 当前用户账户信息（user_account）
  - name: Profile
    description: 用户资料（user_profile）
  - name: Addresses
    description: 用户收货地址（user_address）
  - name: Bindings
    description: 第三方/本地认证映射（user_auth）

components:
  securitySchemes:
    cookieAuth:       # 会话：access_token
      type: apiKey
      in: cookie
      name: access_token
    refreshAuth:      # 刷新：refresh_token
      type: apiKey
      in: cookie
      name: refresh_token
    csrfHeader:       # 双提交之一：Header
      type: apiKey
      in: header
      name: X-CSRF-Token
      description: 与 csrf_token Cookie 等值
    csrfCookie:       # 双提交之二：Cookie
      type: apiKey
      in: cookie
      name: csrf_token
      description: 与 X-CSRF-Token Header 等值

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: 幂等键（建议对创建类接口提供，格式 UUID）
      schema: { type: string, example: "8c1f7f5a-9c91-4a40-8d9d-7e1c1b4b0b7d" }

    CsrfHeader:
      name: X-CSRF-Token
      in: header
      required: true
      description: 双提交 CSRF 头。必须与 Cookie `csrf_token` 等值
      schema: { type: string, example: "1fbd1a1b4f3e4a8180f3d2a7c9d2e6f0" }

    CsrfCookie:
      name: csrf_token
      in: cookie
      required: true
      description: 双提交 CSRF Cookie。必须与 Header `X-CSRF-Token` 等值
      schema: { type: string, example: "1fbd1a1b4f3e4a8180f3d2a7c9d2e6f0" }

    ProviderPath:
      name: provider
      in: path
      required: true
      description: 第三方登录提供方
      schema:
        $ref: '#/components/schemas/Provider'
      example: GOOGLE

    AddressId:
      name: id
      in: path
      required: true
      schema: { type: integer, format: int64, minimum: 1 }
      description: 收货地址ID
      example: 123

    RedirectQuery:
      name: redirect
      in: query
      required: false
      description: 登录完成后跳回的站内地址
      schema: { type: string, example: "/dashboard" }

    CodeQuery:
      name: code
      in: query
      required: false
      schema: { type: string }
      description: 授权码
      example: "4/0AfJohXn...abc"

    StateQuery:
      name: state
      in: query
      required: false
      schema: { type: string }
      description: 回传的 state
      example: "d9e2b7b4f9c84b109a2a7c2f8f0c2c2d"

    ErrorQuery:
      name: error
      in: query
      required: false
      schema: { type: string }
      description: 第三方回调错误码
      example: "access_denied"

    ErrorDescQuery:
      name: error_description
      in: query
      required: false
      schema: { type: string }
      description: 第三方回调错误描述
      example: "The user denied the request"

  schemas:
    # ========== 统一返回结构 ==========
    ApiResponseBase:
      type: object
      required: [success, code, message, timestamp]
      properties:
        success:
          type: boolean
          description: 业务是否成功（非 HTTP 含义）
          example: true
        code:
          type: string
          description: 业务码（OK/VALIDATION_ERROR/UNAUTHORIZED/...）
          example: "OK"
        message:
          type: string
          description: 人类可读的简短信息
          example: "OK"
        timestamp:
          type: string
          format: date-time
          description: 服务器时间
          example: "2025-10-26T06:30:00.123Z"
        traceId:
          type: string
          nullable: true
          description: 请求追踪ID
          example: "af9c5b1f0e2a4c1b"
        data:
          description: 业务数据（随具体接口定义）
          nullable: true
        meta:
          description: 附加元信息（分页等，可选）
          nullable: true
          type: object
          properties:
            page: { type: integer, example: 1 }
            size: { type: integer, example: 20 }
            total: { type: integer, example: 135 }

    # ========== 领域枚举/模型 ==========
    AccountStatus:
      type: string
      enum: [ACTIVE, DISABLED]
    Gender:
      type: string
      enum: [UNKNOWN, MALE, FEMALE]
    Provider:
      type: string
      enum: [LOCAL, GOOGLE, FACEBOOK, APPLE, INSTAGRAM, TIKTOK]

    UserAccount:
      type: object
      properties:
        id: { type: integer, format: int64, example: 1001 }
        username: { type: string, example: "eason" }
        nickname: { type: string, example: "Eason" }
        email:
          type: string
          format: email
          nullable: true
          example: "eason@example.com"
        phone:
          type: string
          nullable: true
          example: "+86-13800138000"
        status: { $ref: '#/components/schemas/AccountStatus' }
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          example: "2025-10-25T09:10:00.000Z"
        createdAt: { type: string, format: date-time, example: "2025-10-20T10:00:00.000Z" }
        updatedAt: { type: string, format: date-time, example: "2025-10-25T09:10:00.000Z" }
      required: [id, username, nickname, status, createdAt, updatedAt]

    UserProfile:
      type: object
      properties:
        displayName: { type: string, nullable: true, example: "Eason" }
        avatarUrl: { type: string, nullable: true, example: "https://cdn.example.com/avatar/1001.png" }
        gender: { $ref: '#/components/schemas/Gender' }
        birthday: { type: string, format: date, nullable: true, example: "1990-01-01" }
        country: { type: string, nullable: true, example: "CN" }
        province: { type: string, nullable: true, example: "Guangdong" }
        city: { type: string, nullable: true, example: "Guangzhou" }
        addressLine: { type: string, nullable: true, example: "Tianhe CBD" }
        zipcode: { type: string, nullable: true, example: "510000" }
        extra:
          type: object
          additionalProperties: true
          example: { marketingOptIn: true }
      required: [gender]

    UserAuthBinding:
      type: object
      properties:
        id: { type: integer, format: int64, example: 11 }
        provider: { $ref: '#/components/schemas/Provider' }
        issuer: { type: string, nullable: true, example: "https://accounts.google.com" }
        providerUid: { type: string, example: "1132244556677889900" }
        scope: { type: string, nullable: true, example: "openid email profile" }
        lastLoginAt: { type: string, format: date-time, nullable: true, example: "2025-10-25T08:00:00.000Z" }
        createdAt: { type: string, format: date-time, example: "2025-10-20T10:00:00.000Z" }
        updatedAt: { type: string, format: date-time, example: "2025-10-25T08:00:00.000Z" }

    Address:
      type: object
      properties:
        id: { type: integer, format: int64, example: 123 }
        userId: { type: integer, format: int64, example: 1001 }
        receiverName: { type: string, example: "张三" }
        phone: { type: string, example: "+81-90-1234-5678" }
        country: { type: string, nullable: true, example: "JP" }
        province: { type: string, nullable: true, example: "Tokyo" }
        city: { type: string, nullable: true, example: "Shinjuku" }
        district: { type: string, nullable: true, example: "Nishi-Shinjuku" }
        addressLine1: { type: string, example: "1-1-1" }
        addressLine2: { type: string, nullable: true, example: "Room 901" }
        zipcode: { type: string, nullable: true, example: "160-0023" }
        isDefault: { type: boolean, example: true }
        createdAt: { type: string, format: date-time, example: "2025-10-20T10:00:00.000Z" }
        updatedAt: { type: string, format: date-time, example: "2025-10-25T09:10:00.000Z" }
      required: [id, userId, receiverName, phone, addressLine1, isDefault, createdAt, updatedAt]

    # ======== Requests（附示例） ========
    RegisterRequest:
      type: object
      required: [username, password, nickname]
      properties:
        username: { type: string, example: "eason" }
        password: { type: string, format: password, minLength: 6, example: "Passw0rd!" }
        nickname: { type: string, example: "Eason" }
        email: { type: string, format: email, nullable: true, example: "eason@example.com" }
        phone: { type: string, nullable: true, example: "+86-13800138000" }

    VerifyEmailRequest:
      type: object
      required: [email, code]
      properties:
        email: { type: string, format: email, example: "eason@example.com" }
        code: { type: string, example: "893642" }

    ResendActivationRequest:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email, example: "eason@example.com" }

    LoginRequest:
      type: object
      required: [account, password]
      properties:
        account: { type: string, description: "用户名 / 邮箱 / 手机号其一", example: "eason" }
        password: { type: string, format: password, example: "Passw0rd!" }

    ForgotPasswordRequest:
      type: object
      required: [account]
      properties:
        account: { type: string, example: "eason@example.com" }

    ResetPasswordRequest:
      type: object
      required: [account, code, newPassword]
      properties:
        account: { type: string, example: "eason@example.com" }
        code: { type: string, description: "找回密码验证码", example: "317955" }
        newPassword: { type: string, format: password, minLength: 6, example: "NewPassw0rd!" }

    UpdateAccountRequest:
      type: object
      properties:
        nickname: { type: string, example: "Eason Chen" }
        phone: { type: string, nullable: true, example: "+81-80-0000-0000" }

    ChangeEmailRequest:
      type: object
      required: [newEmail]
      properties:
        newEmail: { type: string, format: email, example: "new.eason@example.com" }

    VerifyNewEmailRequest:
      type: object
      required: [newEmail, code]
      properties:
        newEmail: { type: string, format: email, example: "new.eason@example.com" }
        code: { type: string, example: "556677" }

    UpdateProfileRequest:
      type: object
      properties:
        displayName: { type: string, nullable: true, example: "Eason C." }
        avatarUrl: { type: string, nullable: true, example: "https://cdn.example.com/avatar/1001.png" }
        gender: { $ref: '#/components/schemas/Gender' }
        birthday: { type: string, format: date, nullable: true, example: "1992-10-01" }
        country: { type: string, nullable: true, example: "JP" }
        province: { type: string, nullable: true, example: "Tokyo" }
        city: { type: string, nullable: true, example: "Shinjuku" }
        addressLine: { type: string, nullable: true, example: "1-1-1 Nishi-Shinjuku" }
        zipcode: { type: string, nullable: true, example: "160-0023" }
        extra:
          type: object
          additionalProperties: true
          example: { language: "ja-JP" }

    CreateAddressRequest:
      type: object
      required: [receiverName, phone, addressLine1]
      properties:
        receiverName: { type: string, example: "张三" }
        phone: { type: string, example: "+81-90-1234-5678" }
        country: { type: string, nullable: true, example: "JP" }
        province: { type: string, nullable: true, example: "Tokyo" }
        city: { type: string, nullable: true, example: "Shinjuku" }
        district: { type: string, nullable: true, example: "Nishi-Shinjuku" }
        addressLine1: { type: string, example: "1-1-1" }
        addressLine2: { type: string, nullable: true, example: "Room 901" }
        zipcode: { type: string, nullable: true, example: "160-0023" }
        isDefault: { type: boolean, default: false, example: true }

    UpdateAddressRequest:
      type: object
      properties:
        receiverName: { type: string, example: "张三" }
        phone: { type: string, example: "+81-90-1234-5678" }
        country: { type: string, nullable: true, example: "JP" }
        province: { type: string, nullable: true, example: "Tokyo" }
        city: { type: string, nullable: true, example: "Shinjuku" }
        district: { type: string, nullable: true, example: "Nishi-Shinjuku" }
        addressLine1: { type: string, example: "1-1-1" }
        addressLine2: { type: string, nullable: true, example: "Room 901" }
        zipcode: { type: string, nullable: true, example: "160-0023" }
        isDefault: { type: boolean, example: true }

paths:
  # =========================
  # Auth（匿名入口 + CSRF 发放）
  # =========================
  /auth/register:
    post:
      security: []
      tags: [Auth]
      summary: 本地注册（创建 DISABLED 并发送邮箱验证码）
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequest' }
            example:
              username: "eason"
              password: "Passw0rd!"
              nickname: "Eason"
              email: "eason@example.com"
      responses:
        "202":
          description: 已发送激活邮件
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data:
                        type: object
                        nullable: true
                        example: null
              examples:
                accepted:
                  summary: 发送成功
                  value:
                    success: true
                    code: "ACCEPTED"
                    message: "Verification email sent"
                    timestamp: "2025-10-26T06:30:00.123Z"
                    traceId: "c2f1c1b7f9a34c9e"
                    data: null
        "409":
          description: 用户名/邮箱/手机号已存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "CONFLICT"
                message: "Email already registered"
                timestamp: "2025-10-26T06:30:00.123Z"
                traceId: "f1a2b3c4d5"
                data: null

  /auth/verify-email:
    post:
      security: []
      tags: [Auth]
      summary: 验证邮箱验证码并激活账户（status=ACTIVE）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VerifyEmailRequest' }
            example: { email: "eason@example.com", code: "893642" }
      responses:
        "201":
          description: 注册激活成功（下发会话与 CSRF 令牌）
          headers:
            Set-Cookie:
              schema: { type: string }
              description: >
                Set-Cookie: access_token=...; HttpOnly; Secure;  
                Set-Cookie: csrf_token=...; Secure; SameSite=Lax
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAccount' }
              example:
                success: true
                code: "CREATED"
                message: "Account activated"
                timestamp: "2025-10-26T06:30:10.000Z"
                traceId: "act-123"
                data:
                  id: 1001
                  username: "eason"
                  nickname: "Eason"
                  email: "eason@example.com"
                  status: "ACTIVE"
                  createdAt: "2025-10-20T10:00:00.000Z"
                  updatedAt: "2025-10-26T06:30:10.000Z"
        "422":
          description: 验证码错误或过期
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "UNPROCESSABLE_ENTITY"
                message: "Invalid or expired code"
                timestamp: "2025-10-26T06:30:10.000Z"
                traceId: "bad-code"
                data: null

  /auth/resend-activation:
    post:
      security: []
      tags: [Auth]
      summary: 重新发送激活邮件
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ResendActivationRequest' }
            example: { email: "eason@example.com" }
      responses:
        "202":
          description: 已重新发送
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "ACCEPTED"
                message: "Verification email re-sent"
                timestamp: "2025-10-26T06:30:20.000Z"
                data: null
        "404":
          description: 账户不存在或已激活
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "NOT_FOUND"
                message: "Account not found or already active"
                timestamp: "2025-10-26T06:30:20.000Z"
                data: null

  /auth/login:
    post:
      security: []
      tags: [Auth]
      summary: 本地登录（用户名/邮箱/手机号 + 密码）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
            example: { account: "eason", password: "Passw0rd!" }
      responses:
        "200":
          description: 登录成功（Set-Cookie 会话 + CSRF）
          headers:
            Set-Cookie:
              schema: { type: string }
              description: >
                Set-Cookie: access_token=...; HttpOnly; Secure;  
                Set-Cookie: csrf_token=...; Secure; SameSite=Lax
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAccount' }
              example:
                success: true
                code: "OK"
                message: "Login success"
                timestamp: "2025-10-26T06:31:00.000Z"
                data:
                  id: 1001
                  username: "eason"
                  nickname: "Eason"
                  email: "eason@example.com"
                  status: "ACTIVE"
        "401":
          description: 认证失败（密码错误或账户未激活）
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "UNAUTHORIZED"
                message: "Bad credentials or inactive user"
                timestamp: "2025-10-26T06:31:00.000Z"
                data: null

  /auth/logout:
    post:
      tags: [Auth]
      summary: 退出登录（清除 Cookie 或使其失效）
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      responses:
        "200":
          description: 已退出
          headers:
            Set-Cookie:
              schema: { type: string }
              description: 清除 access_token/csrf_token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "OK"
                message: "Logged out"
                timestamp: "2025-10-26T06:31:20.000Z"
                data: null

  /auth/refresh-token:
    post:
      tags: [Auth]
      summary: 刷新访问令牌（依赖 refresh_token Cookie + CSRF）
      security:
        - refreshAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      responses:
        "200":
          description: 已刷新
          headers:
            Set-Cookie:
              schema: { type: string }
              description: 更新 access_token（以及可选轮换 csrf_token）
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "OK"
                message: "Token refreshed"
                timestamp: "2025-10-26T06:31:40.000Z"
                data: null
        "401":
          description: 刷新令牌无效或过期
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "UNAUTHORIZED"
                message: "Invalid refresh token"
                timestamp: "2025-10-26T06:31:40.000Z"
                data: null

  /auth/csrf:
    get:
      tags: [Auth]
      summary: 获取/轮换 CSRF 令牌（返回并 Set-Cookie）
      description: >
        已登录后调用。服务端生成随机 `csrf_token`，与会话绑定并下发：
        - Set-Cookie: csrf_token=...（非 HttpOnly）
        - Body 回显 { csrfToken }
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema: { type: string }
              description: 'Set-Cookie: csrf_token=...; Secure; SameSite=Strict|Lax'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          csrfToken: { type: string, example: "1fbd1a1b4f3e4a8180f3d2a7c9d2e6f0" }
              example:
                success: true
                code: "OK"
                message: "CSRF token issued"
                timestamp: "2025-10-26T06:32:00.000Z"
                data:
                  csrfToken: "1fbd1a1b4f3e4a8180f3d2a7c9d2e6f0"

  # =========================
  # OAuth2（匿名入口）
  # =========================
  /oauth2/{provider}/authorize:
    get:
      security: []
      tags: [OAuth2]
      summary: 跳转至第三方授权页（生成并缓存 state/nonce/code_verifier）
      parameters:
        - $ref: '#/components/parameters/ProviderPath'
        - $ref: '#/components/parameters/RedirectQuery'
      responses:
        "302":
          description: 重定向到第三方授权页面
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "FOUND"
                message: "Redirecting to provider"
                timestamp: "2025-10-26T06:33:00.000Z"
                data: { url: "https://accounts.google.com/o/oauth2/v2/auth?..." }

  /oauth2/{provider}/callback:
    get:
      security: []
      tags: [OAuth2]
      summary: 第三方回调（处理 code/state 或 error）
      parameters:
        - $ref: '#/components/parameters/ProviderPath'
        - $ref: '#/components/parameters/CodeQuery'
        - $ref: '#/components/parameters/StateQuery'
        - $ref: '#/components/parameters/ErrorQuery'
        - $ref: '#/components/parameters/ErrorDescQuery'
      responses:
        "302":
          description: 登录成功或失败后重定向至前端页面
          headers:
            Set-Cookie:
              schema: { type: string }
              description: 成功时 Set-Cookie `access_token` 与 `csrf_token`
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "FOUND"
                message: "Redirect to app"
                timestamp: "2025-10-26T06:33:20.000Z"
                data: { url: "/dashboard" }
        "400":
          description: state/nonce 校验失败或第三方返回 error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "BAD_REQUEST"
                message: "Invalid state"
                timestamp: "2025-10-26T06:33:20.000Z"
                data: null

  # =========================
  # Users（仅读不需 CSRF；修改需 CSRF）
  # =========================
  /users/me:
    get:
      tags: [Users]
      summary: 获取当前用户账户信息
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAccount' }
              example:
                success: true
                code: "OK"
                message: "OK"
                timestamp: "2025-10-26T06:34:00.000Z"
                data:
                  id: 1001
                  username: "eason"
                  nickname: "Eason"
                  email: "eason@example.com"
                  status: "ACTIVE"
        "401":
          description: 未登录
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "UNAUTHORIZED"
                message: "Unauthorized"
                timestamp: "2025-10-26T06:34:00.000Z"
                data: null

    patch:
      tags: [Users]
      summary: 修改当前用户账户信息（昵称、手机号等）
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateAccountRequest' }
            example:
              nickname: "Eason Chen"
              phone: "+81-80-0000-0000"
      responses:
        "200":
          description: 修改成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAccount' }
              example:
                success: true
                code: "OK"
                message: "Profile updated"
                timestamp: "2025-10-26T06:34:30.000Z"
                data:
                  id: 1001
                  username: "eason"
                  nickname: "Eason Chen"
                  email: "eason@example.com"
                  status: "ACTIVE"

  /users/me/email/change:
    post:
      tags: [Users]
      summary: 申请变更邮箱（向新邮箱发送验证码）
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ChangeEmailRequest' }
            example: { newEmail: "new.eason@example.com" }
      responses:
        "202":
          description: 已发送验证码
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "ACCEPTED"
                message: "Verification code sent to new email"
                timestamp: "2025-10-26T06:35:00.000Z"
                data: null
        "409":
          description: 新邮箱已被占用
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "CONFLICT"
                message: "Email already in use"
                timestamp: "2025-10-26T06:35:00.000Z"
                data: null

  /users/me/email/verify:
    post:
      tags: [Users]
      summary: 验证新邮箱验证码并生效
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VerifyNewEmailRequest' }
            example: { newEmail: "new.eason@example.com", code: "556677" }
      responses:
        "200":
          description: 已更新邮箱
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAccount' }
              example:
                success: true
                code: "OK"
                message: "Email updated"
                timestamp: "2025-10-26T06:35:20.000Z"
                data:
                  id: 1001
                  username: "eason"
                  nickname: "Eason"
                  email: "new.eason@example.com"
                  status: "ACTIVE"
        "422":
          description: 验证码错误或过期
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "UNPROCESSABLE_ENTITY"
                message: "Invalid or expired code"
                timestamp: "2025-10-26T06:35:20.000Z"
                data: null

  # =========================
  # Profile
  # =========================
  /users/me/profile:
    get:
      tags: [Profile]
      summary: 获取当前用户资料
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserProfile' }
              example:
                success: true
                code: "OK"
                message: "OK"
                timestamp: "2025-10-26T06:36:00.000Z"
                data:
                  displayName: "Eason C."
                  avatarUrl: "https://cdn.example.com/avatar/1001.png"
                  gender: "UNKNOWN"
                  country: "JP"

    patch:
      tags: [Profile]
      summary: 更新当前用户资料
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProfileRequest' }
            example:
              displayName: "Eason C."
              avatarUrl: "https://cdn.example.com/avatar/1001.png"
              gender: "MALE"
              country: "JP"
      responses:
        "200":
          description: 已更新
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserProfile' }
              example:
                success: true
                code: "OK"
                message: "Profile updated"
                timestamp: "2025-10-26T06:36:30.000Z"
                data:
                  displayName: "Eason C."
                  avatarUrl: "https://cdn.example.com/avatar/1001.png"
                  gender: "MALE"
                  country: "JP"

  # =========================
  # Bindings（第三方映射）
  # =========================
  /users/me/bindings:
    get:
      tags: [Bindings]
      summary: 查看当前用户的认证绑定列表
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/UserAuthBinding' }
              example:
                success: true
                code: "OK"
                message: "OK"
                timestamp: "2025-10-26T06:37:00.000Z"
                data:
                  - id: 11
                    provider: "GOOGLE"
                    issuer: "https://accounts.google.com"
                    providerUid: "1132..."
                    scope: "openid email profile"

  /users/me/bindings/{provider}/link:
    post:
      tags: [Bindings]
      summary: 绑定第三方账号
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
        - $ref: '#/components/parameters/ProviderPath'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                authCode:
                  type: string
                  description: 当采用 code 交换的直连绑定流程时使用
                  example: "4/0AfJohXn...abc"
      responses:
        "201":
          description: 绑定成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/UserAuthBinding' }
              example:
                success: true
                code: "CREATED"
                message: "Binding created"
                timestamp: "2025-10-26T06:37:30.000Z"
                data:
                  id: 12
                  provider: "GOOGLE"
                  issuer: "https://accounts.google.com"
                  providerUid: "1132..."
        "409":
          description: 该第三方账号已绑定其他用户
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "CONFLICT"
                message: "Provider account already bound"
                timestamp: "2025-10-26T06:37:30.000Z"
                data: null

  /users/me/bindings/{provider}:
    delete:
      tags: [Bindings]
      summary: 解绑第三方账号
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
        - $ref: '#/components/parameters/ProviderPath'
      responses:
        "200":
          description: 已解绑
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "OK"
                message: "Binding removed"
                timestamp: "2025-10-26T06:38:00.000Z"
                data: null
        "400":
          description: 不允许解绑仅有的登录方式
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "BAD_REQUEST"
                message: "Cannot remove the only login method"
                timestamp: "2025-10-26T06:38:00.000Z"
                data: null

  # =========================
  # Addresses（地址）
  # =========================
  /users/me/addresses:
    get:
      tags: [Addresses]
      summary: 列出当前用户的收货地址
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Address' }
                      meta:
                        type: object
                        properties:
                          page: { type: integer, example: 1 }
                          size: { type: integer, example: 20 }
                          total: { type: integer, example: 2 }
              example:
                success: true
                code: "OK"
                message: "OK"
                timestamp: "2025-10-26T06:39:00.000Z"
                data:
                  - id: 123
                    receiverName: "张三"
                    phone: "+81-90-1234-5678"
                    addressLine1: "1-1-1"
                    isDefault: true
                  - id: 124
                    receiverName: "李四"
                    phone: "+81-90-9876-5432"
                    addressLine1: "2-2-2"
                    isDefault: false
                meta:
                  page: 1
                  size: 20
                  total: 2

    post:
      tags: [Addresses]
      summary: 新增收货地址
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAddressRequest' }
            example:
              receiverName: "张三"
              phone: "+81-90-1234-5678"
              addressLine1: "1-1-1"
              zipcode: "160-0023"
              isDefault: true
      responses:
        "201":
          description: 已创建
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Address' }
              example:
                success: true
                code: "CREATED"
                message: "Address created"
                timestamp: "2025-10-26T06:39:30.000Z"
                data:
                  id: 125
                  receiverName: "张三"
                  phone: "+81-90-1234-5678"
                  addressLine1: "1-1-1"
                  isDefault: true

  /users/me/addresses/{id}:
    get:
      tags: [Addresses]
      summary: 获取收货地址详情
      parameters:
        - $ref: '#/components/parameters/AddressId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Address' }
              example:
                success: true
                code: "OK"
                message: "OK"
                timestamp: "2025-10-26T06:40:00.000Z"
                data:
                  id: 123
                  receiverName: "张三"
                  phone: "+81-90-1234-5678"
                  addressLine1: "1-1-1"
                  isDefault: true
        "404":
          description: 未找到或不属于当前用户
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: false
                code: "NOT_FOUND"
                message: "Address not found"
                timestamp: "2025-10-26T06:40:00.000Z"
                data: null

    patch:
      tags: [Addresses]
      summary: 修改收货地址
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/AddressId'
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateAddressRequest' }
            example:
              receiverName: "张三"
              phone: "+81-90-1111-2222"
              isDefault: false
      responses:
        "200":
          description: 已修改
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBase'
                  - type: object
                    properties:
                      data: { $ref: '#/components/schemas/Address' }
              example:
                success: true
                code: "OK"
                message: "Address updated"
                timestamp: "2025-10-26T06:40:30.000Z"
                data:
                  id: 123
                  receiverName: "张三"
                  phone: "+81-90-1111-2222"
                  addressLine1: "1-1-1"
                  isDefault: false

    delete:
      tags: [Addresses]
      summary: 删除收货地址
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/AddressId'
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      responses:
        "200":
          description: 已删除
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "OK"
                message: "Address deleted"
                timestamp: "2025-10-26T06:41:00.000Z"
                data: null

  /users/me/addresses/{id}/set-default:
    post:
      tags: [Addresses]
      summary: 设为默认地址（保证同用户仅一个默认）
      security:
        - cookieAuth: []
          csrfHeader: []
          csrfCookie: []
      parameters:
        - $ref: '#/components/parameters/AddressId'
        - $ref: '#/components/parameters/CsrfHeader'
        - $ref: '#/components/parameters/CsrfCookie'
      responses:
        "200":
          description: 已设为默认
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponseBase' }
              example:
                success: true
                code: "OK"
                message: "Default address set"
                timestamp: "2025-10-26T06:41:30.000Z"
                data: null
